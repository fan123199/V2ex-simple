apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'


android {

    compileSdkVersion 30
    defaultConfig {
        applicationId "im.fdx.v2ex"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 39
        versionName "2.6.6"
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {

            googlePlay {
                Properties prop = getSignConfig()
                if (prop != null) {
                    keyAlias prop['keyAlias']
                    keyPassword prop['keyPassword']
                    storeFile file(prop['storeFile'])
                    storePassword prop['storePassword']
                }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.googlePlay
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.jvmTarget = '1.8'
}


android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        if(variant.buildType == 'debug') {
            outputFileName = "v2ex-${variant.buildType}-${variant.versionName}.apk"
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    //test related, use test when you really need it, or you forget always.
    testImplementation 'junit:junit:4.12'
    //test end

    //kotlin start
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.anko:anko-commons:0.10.8"
    implementation 'androidx.core:core-ktx:1.3.1'
    //kotlin end

    //google start
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.legacy:legacy-support-v13:1.0.0"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.browser:browser:1.2.0" //已经被appcompat包含
    implementation "androidx.preference:preference:1.1.1"
    implementation "com.google.android.material:material:1.2.0"

    implementation "android.arch.work:work-runtime-ktx:1.0.1"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0'

    implementation 'androidx.room:room-runtime:2.2.5'
    implementation 'androidx.room:room-ktx:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'
    //google end

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'

    debugImplementation 'com.github.ChuckerTeam.Chucker:library:3.1.2'
    releaseImplementation 'com.github.ChuckerTeam.Chucker:library-no-op:3.1.2'
    implementation 'com.elvishew:xlog:1.6.1'
    implementation 'org.jsoup:jsoup:1.11.3'
//    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.14'
    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'me.drakeet.multitype:multitype:3.5.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.github.esafirm.android-image-picker:imagepicker:2.0.0'
    implementation 'com.google.firebase:firebase-core:17.5.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
}

def getSignConfig() {
    def file = rootProject.file("keystore.properties")
    def prop = new Properties()
    try {
        prop.load(new FileInputStream(file))
    }catch (FileNotFoundException e) {
        e.printStackTrace()
        return null
    }
    return prop
}

apply plugin: 'com.google.gms.google-services'